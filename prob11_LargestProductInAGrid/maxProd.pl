#!/usr/bin/perl

use strict;
use warnings;

# maxProd.pl <data set>
# sets: lil med big Big

my $arg = shift || die "Usage:\n\tmaxProd lil for 6x6 array\n",
                                     "\t\tmed for 10x10 array\n",
                                     "\t\tbig for Prob11 array\n",
                                     "\t\tBig for 20x20 array\n";
# initialize the data sets
my $lilStr = <<DATA;
00 01 02 03 04 05
10 11 12 13 14 15
20 21 22 23 24 25
30 31 32 33 34 35
40 41 42 43 44 45
50 51 52 53 54 55
DATA

my $medStr = <<DATA;
00 01 02 03 04 05 06 07 08 09
10 11 12 13 14 15 16 17 18 19
20 21 22 23 24 25 26 27 28 29
30 31 32 33 34 35 36 37 38 39
40 41 42 43 44 45 46 47 48 49
50 51 52 53 54 55 56 57 58 59
60 61 62 63 64 65 66 67 68 69
70 71 72 73 74 75 76 77 78 79
80 81 82 83 84 85 86 87 88 89
90 91 92 93 94 95 96 97 98 99
DATA

my $bigStr = <<DATA;
08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
DATA

my $BigStr = <<DATA;
00 01 02 03 04 05 06 07 08 09 010 011 012 013 014 015 016 017 018 019
10 11 12 13 14 15 16 17 18 19 110 111 112 113 114 115 116 117 118 119
20 21 22 23 24 25 26 27 28 29 210 211 212 213 214 215 216 217 218 219
30 31 32 33 34 35 36 37 38 39 310 311 312 313 314 315 316 317 318 319
40 41 42 43 44 45 46 47 48 49 410 411 412 413 414 415 416 417 418 419
50 51 52 53 54 55 56 57 58 59 510 511 512 513 514 515 516 517 518 519
60 61 62 63 64 65 66 67 68 69 610 611 612 613 614 615 616 617 618 619
70 71 72 73 74 75 76 77 78 79 710 711 712 713 714 715 716 717 718 719
80 81 82 83 84 85 86 87 88 89 810 811 812 813 814 815 816 817 818 819
90 91 92 93 94 95 96 97 98 99 910 911 912 913 914 915 916 917 918 919
1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019
1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119
1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219
1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319
1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419
1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519
1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619
1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719
1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819
1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919
DATA

# associate datasets to argument string
my $h_args = {
    "lil" => $lilStr,
    "med" => $medStr,
    "big" => $bigStr,
    "Big" => $BigStr,
};

# check for valid argument string entered
my $data = ( exists $h_args->{$arg} )
    ? $h_args->{$arg}
    : die "\tArray \"$arg\" not recognized...\n";
print "$data\n";

# initialize array stuff...
my $count = 0;
my $sSize = 4;               # actual sample size
my $smpl  = $sSize - 1;      # adjusted sample size

# process raw data into array_ref
my $array_ref  = [ map { [ split ] } split( /\n/, $data ) ];
my $array_last = $#$array_ref;
my $array_size =  @$array_ref;
my @allArray;

# work on horizontal and vertical
my ( @horz, @vert );
my ( $hmax, $vmax ) = ( 1 ) x 2;
my $iters = $array_size - $sSize;
for my $z ( 0 .. $iters ) {
    for my $y ( 0 .. $array_last ) {
        my ( $h, $v ) =  ( 1 ) x 2;
        for my $x ( 0 .. $smpl) {
            push @horz, $array_ref->[$y][$x + $z];
            push @vert, $array_ref->[$x + $z][$y];
        }
        push @allArray, [ "h:", @horz, "v:", @vert, "c:", $count ];
        $h *= $_ for @horz;
        $v *= $_ for @vert;
        $count += 2;
        $hmax = ( $h > $hmax ) ? $h : $hmax;
        $vmax = ( $v > $vmax ) ? $v : $vmax;
        ( @horz, @vert ) = ( ) x 2;
    }
}

# work on the diagonals
my ( @diup, @didn );
my ( $umax, $dmax ) = ( 1 ) x 2;
for my $z ( 0 .. $iters ) {
    for my $y ( 0 .. $iters ) {
        my $o = 0;
        my ( $u, $d ) = ( 1 ) x 2;
        for my $x ( 0 .. $smpl ) {
            push @diup, $array_ref->[ $array_last - $o - $y ][ $x + $z ];
            push @didn, $array_ref->[ $x + $z ][ $y + $o++ ];
        }
        push @allArray, [ "u:", @diup, "d:", @didn, "c:", $count ];
        $u *= $_ for @diup;
        $d *= $_ for @didn;
        $count += 2;
        $umax = ( $u > $umax ) ? $u : $umax;
        $dmax = ( $d > $dmax ) ? $d : $dmax;
        ( @diup, @didn ) = ( ) x 2;
    }
}

# $max is...
my $max = ( $hmax > $vmax )
            ? ( $umax > $dmax )
                ? ( $hmax > $umax ) ? $hmax : $umax
                : ( $hmax > $dmax ) ? $hmax : $dmax
            : ( $umax > $dmax )
                ? ( $vmax > $umax ) ? $vmax : $umax
                : ( $vmax > $dmax ) ? $vmax : $dmax;

# results
print "@$_\n" for ( @allArray );
print "Max values found:\n";
print "horz:   ", $hmax, ", vert: ", $vmax, "\n";
print "diup:   ", $umax, ", didn: ", $dmax, "\n";
print "winner: ", $max,  "\n";
